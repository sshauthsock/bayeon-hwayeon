# .github/workflows/deploy.yml
# This workflow is for deploying the frontend (SPA) to GitHub Pages.

name: Deploy Frontend & Backend # 워크플로우 이름

on:
  push:
    branches:
      - main # <<-- 여러분의 기본 브랜치 (main 또는 master)에 맞춰 설정

jobs:
  deploy-frontend: # 작업 이름 (프론트엔드 전용)
    runs-on: ubuntu-latest # GitHub Actions는 Ubuntu 가상 환경에서 실행

    # GitHub Actions 워크플로우 자체의 권한 설정
    permissions:
      contents: write # 저장소 콘텐츠(gh-pages 브랜치)에 쓰기 권한
      pages: write # GitHub Pages 배포를 위한 권한
      id-token: write # GitHub Pages v3 액션의 OIDC 관련 (현재 JamesIves 액션에는 불필요할 수 있으나 안전을 위해 유지)

    # 환경 변수 설정 (이제 필요 없음)
    # env:
    # 이 워크플로우는 GCP와 직접 통신하지 않으므로 GCP_PROJECT_ID, AR_LOCATION 등은 필요 없습니다.
    # 백엔드 배포 워크플로우에서 별도로 관리됩니다.

    steps:
      - name: Checkout repository # GitHub 저장소 코드를 가상 머신으로 가져옵니다.
        uses: actions/checkout@v3

      # [수정 시작] Node.js 설치 및 JS/CSS 도구 설치 스텝 제거
      # 난독화/압축을 하지 않으므로 Node.js 관련 도구는 필요 없습니다.
      # - name: Setup Node.js (for JS/CSS processing)
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: "16"
      # - name: Install JavaScript/CSS tools
      #   run: |
      #     npm install -g javascript-obfuscator
      #     npm install -g clean-css-cli
      # [수정 끝]

      # -------------------------------------------------------------
      # 1. Frontend Processing (원본 파일 복사)
      #    이 섹션은 원본 프론트엔드 파일들을 dist 폴더로 복사합니다.
      #    난독화, 압축, 경로 변경은 하지 않습니다.
      # -------------------------------------------------------------
      - name: Create dist directory and copy raw files # dist 폴더 생성 및 원본 파일 복사
        run: |
          rm -rf dist # 기존 dist 폴더 삭제
          mkdir -p dist # 새 dist 폴더 생성

          # [수정 시작] 모든 필요한 원본 파일 및 폴더를 dist/로 명시적으로 복사
          # 파일 구조에 맞춰 정확히 복사되어야 합니다.
          cp index.html dist/ # index.html 복사 (루트에 있다고 가정)
          cp -r assets/ dist/ # assets/ 폴더 전체를 dist/로 복사
          cp -r js/ dist/ # js/ 폴더 전체를 dist/로 복사
          # [수정 끝]

          # 숨김 파일 중 .nojekyll을 제외하고 삭제 (GitHub Pages에서 필요할 수 있음)
          # 이 과정은 rsync를 사용하지 않았으므로 필요 없을 수 있지만, 안전을 위해 유지
          find dist -type f -name ".*" ! -name ".nojekyll" -delete || true

      # [수정 시작] 난독화/압축/HTML 업데이트 관련 스텝들 모두 제거
      # - name: Process JS files (Obfuscate and rename)
      #   run: | ... (생략) ...
      # - name: Process CSS files (Minify and rename)
      #   run: | ... (생략) ...
      # - name: Update HTML files to use processed JS and CSS
      #   run: | ... (생략) ...
      # - name: Prepare index.html for GitHub Pages (if needed)
      #   run: | ... (생략) ...
      # [수정 끝]
      # 이제 index.html은 그대로 복사되고, 그 안에 있는 경로들은 워크플로우에 의해 변경되지 않습니다.
      # 따라서 index.html은 모든 리소스를 상대 경로로 참조해야 합니다.

      # -------------------------------------------------------------
      # 2. Deploy Frontend to GitHub Pages
      #    원본 프론트엔드 파일들을 GitHub Pages로 배포합니다.
      # -------------------------------------------------------------
      - name: Deploy Frontend to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # 배포할 브랜치 (gh-pages 브랜치가 없으면 자동으로 생성됨)
          folder: dist # <<-- dist 폴더의 내용물을 gh-pages 루트로 복사 (JamesIves 액션의 옵션)
          clean: true # gh-pages 브랜치의 이전 내용을 정리하고 배포
          token: ${{ secrets.GITHUB_TOKEN }} # GitHub Pages 배포 권한을 가진 토큰 (GitHub Actions가 자동으로 제공)


      # -------------------------------------------------------------
      # 백엔드 배포 관련 스텝들은 모두 제거됨 (프론트엔드 전용 워크플로우)
      # -------------------------------------------------------------
      # 백엔드 배포는 별도의 저장소(예: baram-yeon)에서 이루어집니다.
      # - name: Setup Go (for backend build)
      #   uses: actions/setup-go@v5
      #   with:
      #     go-version: "1.23"
      # - name: Authenticate to Google Cloud (using JSON Key)
      #   id: "auth"
      #   uses: "google-github-actions/auth@v2"
      #   with:
      #     project_id: ${{ env.GCP_PROJECT_ID }}
      #     credentials_json: ${{ secrets.GCP_SA_KEY }}
      # - name: Set up Cloud SDK (gcloud CLI)
      #   uses: google-github-actions/setup-gcloud@v2
      # - name: Build and Push Docker image to Artifact Registry
      #   run: |
      #     gcloud auth configure-docker ...
      #     docker build ...
      #     docker push ...
      #   working-directory: ./backend/
      # - name: Deploy to Cloud Run
      #   run: |
      #     gcloud run deploy ...
